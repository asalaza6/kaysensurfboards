{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport splashSrc from '../public/splashpic.jpg';\n\nvar Splash = /*#__PURE__*/function (_React$Component) {\n  _inherits(Splash, _React$Component);\n\n  function Splash(props) {\n    var _this;\n\n    _classCallCheck(this, Splash);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Splash).call(this, props));\n    _this.state = {\n      imgWidth: 0,\n      imgHeight: 0,\n      width: 0,\n      height: 0,\n      horizontal: 0\n    };\n    _this.updateDim = _this.updateDim.bind(_assertThisInitialized(_this));\n    _this.onImgLoad = _this.onImgLoad.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Splash, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateDim();\n      window.addEventListener('resize', this.updateDim);\n    }\n  }, {\n    key: \"updateDim\",\n    value: function updateDim() {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n\n      if (this.state.width / this.state.height < this.state.imgWidth / this.state.imgHeight) {\n        this.setState({\n          horizontal: true\n        });\n      } else {\n        this.setState({\n          horizontal: false\n        });\n      }\n    }\n  }, {\n    key: \"onImgLoad\",\n    value: function onImgLoad(_ref) {\n      var img;\n      return _regeneratorRuntime.async(function onImgLoad$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              img = _ref.target;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this.setState({\n                imgHeight: img.offsetHeight,\n                imgWidth: img.offsetWidth\n              }));\n\n            case 3:\n              this.updateDim();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, _Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(\"div\", {\n        style: splash\n      }, __jsx(\"div\", {\n        style: splashImgContainer\n      }, __jsx(\"img\", {\n        onLoad: this.onImgLoad,\n        style: this.state.horizontal ? {\n          splashImg1: splashImg1\n        } : {\n          splashImg2: splashImg2\n        },\n        src: splashSrc,\n        alt: \"Logo\"\n      }))));\n    }\n  }]);\n\n  return Splash;\n}(React.Component); //\n\n\nvar splash = {\n  minHeight: \"75vh\",\n  width: \"100%\"\n};\nvar splashImgContainer = {\n  height: \"100vh\",\n  overflow: \"hidden\",\n  position: \"relative\",\n  textAlign: \"center\",\n  justifyContent: \"center\"\n};\nvar splashText = {\n  margin: \"auto\",\n  maxWidth: 1000,\n  border: '1px solid #DDD',\n  textAlign: \"center\",\n  position: \"relative\",\n  //fontFamily:  $fontFamily,\n  fontSize: 30\n};\nvar splashImg1 = {\n  height: \"100%\",\n  width: \"auto\"\n};\nvar splashImg2 = {\n  height: \"auto\",\n  width: \"100%\"\n};\nexport default Splash;","map":null,"metadata":{},"sourceType":"module"}